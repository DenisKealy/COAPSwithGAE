===================================
          *-PaaS API
===================================
Authors: Mohamed Moahemd, Mohamed Sellami, Sami Yangui, Samir Tata
Contributor: Telecom SudParis

*******************
A. Description
*******************
The CompatibleOne platform can interact with several PaaS providers (e.g. CloudFoundry, OpenShift, etc).
In this aim, we are working on a generic REST API (*-PaaS API) that allows the CompatibleOne platform to seamlessly interact with different and heterogeneous 
PaaS providers.

The *-PaaS API exposes several interfaces that has be implemented according to the different actions that can exposes a PaaS provider to manage applications 
and environments. These interfaces should implemented for each PaaS solution to connect to CompatibleOne platform.
By doing so, we should have as many API implementations as PaaS providers used by CompatibleOne platform. 
In this way, to add a new PaaS, one have only to develop its specific API implementation. 
For instance, a CloudFoundry-PaaS API implementation will act as a middleware between CompatibleOne platform and CloudFoundry.

************************
B. Build
************************

Requirements: Maven Maven 3.0.4

1. Create a clone of the dev-paas-api folder
2. In the root directory run mvn install

This action will package the different sub-modules:
- api: the jar file of the generic *-PaaS api
- core: two war files associated to the cloudFoundry and the Openshift implementations of the *-PaaS api
- client: a war file containing a Web client

************************
C. Folder content
************************
1. spec
-------
This folder contains *-PaaS API specification (V1.3).

2. manifests
-------------
This folder contains manifest models used by the API to describe:
	* Environment,
	* Application,
	* ApplicationVersion,
	* ApplicationVersionInstance.

3. api
-------
This folder contains the java interfaces for the *-PaaS API. The current api ensures application and environment management operations.

4. core
--------
This folder contains two subfolders: 
	* 4.1 [CloudFoundry-api] : the CloudFoundry-PaaS API implementation.
	* 4.2 [OpenShift-api] : the OpenShift-PaaS API implementation.

After the maven build (section B), a Web application (i.e. war file) is generated in each sub-folder. These application have to be 
deployed on a Web server and will acts a REST server which allows to respectively interact with a CloudFoundry/an Open Shift PaaS instance. 
To invoke API actions, one can use our Web-based client (see Section 5) or any REST client (eg. CURL).

Requirements: 
	* Web container : Apache Tomcat (V7)
	* Runtime: Java 1.6

Usage:
	a. Deploy the generated WAR file (CF-api.war for the CloudFoundry implementation respectively OS-api.war for the openshift implementation) on tomcat,
	b. Type http://localhost:8080/CF-api/ (respectively http://localhost:8080/OS-api/) in your browser to test. You should get a message indicating that 
	your CloudFoundry (respectively Openshift) implementation is correctly running.
	c. Configure your CloudFoundry (respectively Openshift) account by updating the parameters in credentials.properties.
	( WEB-INF/classes/telecom/sudparis/eu/copaas/core/server/ressources/credentials.properties ).
	e. Invoke an action (e.g create application):
		- using CURL: 
		   curl -X POST -d @{URL-of-XML-CloudAppDescriptor} -H "Content-Type: application/xml" http://{hostname}:{port}/CF-api/rest/app
		- using our Web-based client: see Section 5.

5. client
----------
This folder contains a Web-based client to execute the different implementations. 
Use maven (see section B) to build the client and deploy it on tomcat.
To run the client, type (http://localhost:8080/client/) on your browser.
Then, you can select the PaaS instance to interact with (only CloudFoundry and Openshift are available) before following one of the test 
scenarios detailed below.

	5.1 CloudFoundry test scenario
	------------------------------
	To deploy an application on a running CloudFoundry instance, one should follow these steps:
			- Acces the client interface at http://localhost:8080/client/
			- Select the CloudFoundry PaaS solution.
			- Create an environment: select the “create environment” action from the action list and provide the manifest fragment
				describing the needed environment for the application to deploy (runtimes, frameworks, etc.). In the body of the 
				request just paste the content of test-resources/CloudFoundry-test-manifests/EnvironmentManifest.xml (without the license comment).
				If additional nodes are needed, a database for example, the Environment manifest must be updated accordingly. To add a mysql database 
				in the environment for example, add this element <paas_node content_type="database" name="mysql" version="2.2" provider="CF"/>
				after the existing <paas_node> element. 
				After submitting this requested (i.e. the submit button), an XML description of the created environment is returned.
				From this descriptor, you have to ''save'' the returned “envid” that must be provided later to link this environment to the 
				application to deploy (deployApplication action).
			- Create the application: select the “create application” action from the action list and provide the manifest fragment
				describing the application. In the body of the request just paste the content of 
				test-resources/CloudFoundry-test-manifests/ApplicationManifest.xml (without the license comment).				
				In the same way as the created environment, an “appid” will be provided by the API.
			- Create an application version: select the “create application version” action from the action list and provide the
				application identifier “appid” in the path and the manifest fragment describing the application version (artifacts, paths, etc.).
				The manifest that will be used can be found at test-resources/CloudFoundry-test-manifests/ApplicationVersionManifest.xml
				IMPORTANT: Here do not forget to modify the ApplicationVersionManifest to change the name of the application (if needed) and to
				specify the path of the application to deploy in the <paas_deployable> element.
			- Create an application version instance: select the “create application version instance” action from the action list,
				provide the application identifier “appid” in the path and the manifest fragment describing the application version instance.
				The manifest that will be used can be found at test-resources/CloudFoundry-test-manifests/ApplicationVersionInstanceManifest.xml
			- Deploy the application (from the EnvironmentManager Operations): select the “deploy application” action from the action list while 
			  specifying the environment identifier “envid” and the application identifier “appid” in the path.
			- Start the application: select the “start application” action from the action list and provide the application	identifier “appid” in the path.
			  In the returned application description, you can find the url of the deployed application. 
			- The application is now accessible via a browser on the returned URL.
		
	5.2 Openshift test scenario
	----------------------------
	To deploy an application on a running CloudFoundry instance, one should follow these steps:
			- Acces the client interface at http://localhost:8080/client/
			- Select the Openshift PaaS solution.
			- Create an environment: select the “create environment” action from the action list and provide the manifest fragment
				describing the needed environment to deploy the application (runtimes, frameworks, etc.). The returned “envname” must 
				be provided later to map between this environment and the application to deploy (deployApplication action).
			- Create the application: select the “create application” action from the action list and provide the manifest fragment
				describing the application (application name, artifacts, instances number, environment name “envname”, etc.).
			IMPORTANT: Here do not forget to specify the name and the path of the application to deploy
			- Deploy the application: select the “deploy application” action from the action list while specifying the environment name
				“envname” and the application identifier “appid”. An application "URL" and a "GitURL" will be returned by the API.
			- The application is accessible via a browser on the returned URL. To update the application, one should update its
				Git accessible on the returned “GitURL”.
		
6. test-resources
-----------------

This folder contains test materials: the manifests and a Web application that can be deployed on CF or OS.
	6.1 sampleApplication
	---------------------
	This subfolder contains a test servlet application to deploy.
	
	6.2 CloudFoundry-test-manifests
	-------------------------------
	A set of manifests describing the applications to deploy on CloudFoundry and its environments.

	6.3 OpenShift-test-manifests
	-----------------------------
	A set of manifests describing the applications to deploy on OpenShift and its environments.